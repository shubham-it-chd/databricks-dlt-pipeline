Cert-Manager will obtain a Let’s Encrypt certificate for the backend.


Install Cert-Manager:
bashkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.3/cert-manager.yaml


Verify Cert-Manager:
bashkubectl get pods -n cert-manager
Ensure the cert-manager, cert-manager-cainjector, and cert-manager-webhook Pods are running.


Configure a Let’s Encrypt ClusterIssuer:
Create a ClusterIssuer to use Let’s Encrypt’s production server.
yamlapiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: your-email@example.com # Replace with your email
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: alb
Apply it:
bashkubectl apply -f cluster-issuer.yaml


Request a Certificate:
Create a Certificate resource to obtain a Let’s Encrypt certificate for example.com.
yamlapiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: backend-cert
  namespace: default
spec:
  secretName: backend-tls-secret
  dnsNames:
  - example.com
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
Apply it:
bashkubectl apply -f certificate.yaml
This creates a Secret named backend-tls-secret containing tls.crt and tls.key for example.com.


Verify the Certificate:
bashkubectl get certificate -n default
kubectl describe certificate backend-cert -n default
kubectl get secret backend-tls-secret -n default -o yaml